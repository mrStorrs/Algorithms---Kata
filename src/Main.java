import java.util.Arrays;
<<<<<<< Updated upstream
=======
import java.util.List;
>>>>>>> Stashed changes
import java.util.Random;
import java.util.Collections;

public class Main {
	
	//testing done here. 
    public static void main(String[] args){
    	int tests = 20;
        long startTime = System.currentTimeMillis(); // for testing run speed
<<<<<<< Updated upstream
        Random rd = new Random();

        for(int i = 0; i < tests; i ++) {
        	int[] randomArray = randomNumArrayGen(5, 10);
            String randomString = randomStringGenerator(rd.nextInt(10));

            System.out.println(randomString);
    	    // System.out.println(LeetCodeMedium.lengthOfLongestSubstring(" "));
        }

        long stopTime = System.currentTimeMillis();
=======
        // for(int i = 0; i < tests; i ++) {

        //     System.out.println(Kata6.findNb(24723578342962L));
        // }
        String[] array = { "abc", "02", "10", "00" };
        List<String> list = Arrays.asList(array);
        Collections.sort(list);
        System.out.println(Arrays.toString(array));
        
        long stopTime = System.currentTimeMillis(); 
>>>>>>> Stashed changes
        long elapsedTimeAVG = stopTime - startTime;
        System.out.println("average run-time per " + tests + " tests: " + elapsedTimeAVG);
        System.out.println("average run-time per test: " + elapsedTimeAVG / tests);

    }
<<<<<<< Updated upstream

    /**
     * Randomly generates an array of integers of a specified length. Allows you to
     * specify the max integer.
     * 
     * @param length the length that you want the array to be
     * @param maxNum the maximum number that you want to be randomly generated.
     */
    protected static int[] randomNumArrayGen(int length, int maxNum) {
        Random rd = new Random(); // instantiate new random object
        int[] random = new int[length]; // set length to desired length
        for (int i = 0; i < length - 1; i++) {
            random[i] = rd.nextInt(maxNum + 1); // change num to a random betweewn specified int.;
        }

        return random;
    }

    /**
     * Randomly generates a string using the alphabet (upper and lower case) to a specified length
     * 
     * @param strLength specify how long you want the random strings to be. 
     * @return returns a random string 
     */
    protected static String randomStringGenerator(int strLength) {
        String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();

        while (salt.length() < strLength) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();

        return saltStr;
    }

    /**
     * Randomly generates a string using the alphabet (upper and lower case) to a
     * specified length
     * 
     * @param strLength specify how long you want the random strings to be.
     * @param letters specify which letters you want inside the string.
     * @return returns a random string
     */
    protected static String randomStringGenerator(int strLength, String letters) {
        String SALTCHARS = letters;
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();

        while (salt.length() < strLength) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();

        return saltStr;

    }

=======
    
    //[1,2,3,4]
    //[5,6,7,8]
    //[9,10,11,12]
    //[13,14,15,16]
>>>>>>> Stashed changes
	/* testing for kata 2
    public static void main(String[] args){
    	int tests = 100;
        long startTime = System.currentTimeMillis(); // for testing run speed
        for(int i = 0; i < tests; i ++) {
        	System.out.println(Kata2.triangle(getSaltString()));

        	//System.out.println(Kata2.triangle2("RRGBBBBRRRBRBRGRBGRRRRGBBRBGBGGRRGRBGBGBRBGBBGRBGBBBBGRBRRBGBRRGGRRBRGGRBRBGRGGBRBGRBGGRRRRBGGGBGBRGRGRRRBBRGRRBBRGRGGRBGRRGRRGBBGRRRGBBRGGBRRRRGGGBBBRGBGRGGBGGRBRRBRRBRBGRBBGRRBBGRBRRGGGRRBRBGGRGRGGRBGGBBGRRGBBRRGGRRBRRRGGBBRBBGRGBRRRBGRGGRRRRBRGBBRBRRRBBBBBGGGRBRBGBRBGRGRRGBRRGGRRGRBBGBRRRBRGGGGGRGRRRGGGRGBGRBBBRRBGGBBRRBRBRBGGGBBRGGGRRRBRBBRRBBBBGRBGGRGBBGGRRBRBGBGRGGGRRBBBGGBRRRGRRRBBGRGGRGBRGRBGBBRGBRGBRRGGRRGRGGGRGBBBGGBBBGBBGBRBRBBRBGGGRRBBGRGGRBBGRBBBBGRBRRBRGGGRBRBBBGGRBGBRGGBRBBBGRRRGGBBBRBGBRGBBBBRRBGRBBBGBRRGBRGGBRBRGGGBBRBGBRGGRRGGBGBRGGGBGGGBBBRRRBGRGGRGBBGBRBBBGRRRGRRRRBBGGBBGRGBGGRGBBBBGGRBGBGRBGGBGGRRRGGBBRGBBRRBGGBRRRBRRRGGRBBGBRBBGRGGRBRGGBBRRRGBRRRBRBBGRRGGRRRRGRRGRBRGGRBGGRRBRRRGRRGRRRRGRBBGGRRRRRBBGRGGGBRGGBBGRRBBGRGBGGBGRBRBRGBRBGRBBGRGBRRGRGBRBGRGRBBRBGBRBBRRRBGRBGGGGGRBGGGBGRBGRGRBBRGRGGGRRRBBBRBBGBRGGRBRBBRRRGGBBGRRGBRGRRRRGGGGRBBBGGGRRBGGRRGGGBRRRRRBGRGRGGRGBBGGGRGRGRRBGRGGRBBGGBGRRGRGBBRBRRRGGBRBBGGRBRRRGBRGGBRBRGGGGBRBGRBBGRRGBGGBRBBGRGBRBGRRGGBGRGRRGGRRBBGRGBGBRGRBRGRGGBRBRRRGRBGBBGRGRRBGRBBBBBBRRGRGBRRGBGBGRBGBBBRGGBRRGRBRBBRRBBGBGRBGRBRGBGGRRRRGRGBRBBBGRBRGGGBGRRRBGGRGGRGRRBGBGGRBGBGGBBGBRBGGGGBBGRBRGGRRRBBRRBBRGBBRRGBRGBRBRBGRBRGBRGBGBRRRRGGBRGBBGBGBGGRRGRGBRGRRRBBBGRBRRBGRBBGGBRRRBBGBRRGRGGBRRBGGBRRGRRRGBGRRBGGGRRRGRRRBRGGGRBGGRRRGBGBGGGBBGRGRBGBRBBBBRBGRBGRGBBGBBBGRBGRBGGRGRBGBRRBRRRRBBBRRBRBRRBRBRGGGBGBBGRRGBBBBGGBGRBRBRBBRGBGRRGGBGGGGBBGRRGRRGRRGRRRBBBBBBGBRRBGBGGBBGBRGBGRRGBGGRGRBRGRGGGRRGBBRGRRRBGRGBRGBBBRGGBRGBGBGBRBBGGGGBRBBGRRRGGRRRRRRGBRRBGBRRBBRRGRRBGBRRBBGRGBBRRGGBBGRRRBRGGRBBBGBBGRBBBGBGGBGRGRGRGBGRBBGRGGRRBBBGGGRBGRBGGBRBRRBBRBBBBRGGRRGBRGRBRGRRGBBRGRGRGBRRGBGRGGRBRRBGGBRRGBRRRRRRBGBBRBGGGGRBGRRBBRGRRGGRGBBBGBBBRBBRBBGBGRRBRGRGRBRGBRRBRRGGBGGBGRGGBGRRGRBGRBGBBRGRGRBRRRBRRRGBGGBRBGBBRBRRRGBGRGBBGRBBGBBGBGBGGGRBGGGBRRBGBBBRBGGRBBRBRGBBGBGBBBGBRGBBRGGBRGBRBBBBRGRRGBBBBRRBRBGRRGBGGRRGBGGBBGGBGGRRGRGRBGBGGRRBBBGRBBRGRGGGGBGGRGGGRBBRBBGRGGBRBRGRGBGRGBRRRRGRGRGRBGBGGBBBGRBGRBRGRGBRRRGBBBGGRGGGRRGGGRRGRRGRRBBRBRBGGGGRRRGRBGRBGBGRGGBBGGBBBRRRRGGBRRRRRBRRRGBBGBRRGRGGBGRBRBBGRBRBRGBRRBRBRRRGBRRGBBBRBRGGBBGGRGGRRBBGRRBGGRRRGGRGGRRGGRBGBGGRGBGGRGRRBBRGRGGRBBGGGBGGBGGGRBGRBGGBGBBBGRBGBRBBGBRRBRBRRGGRRGGBBGBGGGRRBRRRBRRRGGBRGRBRRGBBGBGGRGGGRRRBBGRBGRRBBRBGGGBBBBBBGGRBBGRBRBGGRBRGBRRBBBBGRBRBBBBRRGRRRRGBBBRRRRGBBGBGBBGRRRRRRGGBRRRGBGRRBGRRGGGRGBBGBGGBRBGBBBBBBBRBGGGBGRBGRRRGGGBRBBRBRRGGGBBRRRRGGRRBRGGBRRBGRBRGGGRRBGBRGBRRGGRRGRRBGGRBGGBRRGRBGGBGBGGGGBBRBRBGBBRRGGBRBRGBGGGBBGBGBRBRRGBBRBRBRBRRBBGGGBGBBGGBRGRRGBGGBBGGGBRBRGRRRBRBGGGGGRGGGRBBRGGRRRBRRGBBRRGGBGBBGGBRRRBGGRGBRRBRRBBBRGGGGGRRGGBRBGRGBGGBBGGGRBGBGBBGRGRGRRBRBBGBGRGRBBBBRBRGRRRBGGRGBGBBRRBRRGBGGRBGRBRGRRGGGGBBBGGBRRGRRBGBGRBBBGBRBBGBGBGBBRBRGBGRGRGGRBRBGBRGGGRBRRRRRBGRBGGRBGBBBRRBBBBRBBRGGRGRRRBBGBGBBBRBGBGBRRGRRBGRBRBGBGRRGBRBGRGGGRRRBRBGRBGGBRBBBBBGRGGRBRBRRGBBBGGRGGBBBGBGRRBRBRRRGRRBRRGGRRBGGRRBGRGBBRBBBGRRGRRBBBGGBBRRGBRRRGBBGGRRGGRGRGGRRRBRRRGRRRBRBRGGRBGBGRBRGGRRRGGRGRGBRRRRRGGBGRBBBBGBRRBBGBGBGBRGBBRBRGRRRRRGBGBRBRBGGBGRBRGGGGBRBBBBRRRGRGBBGBGRRGBGBBGGRRRRGRGBGRRGGGRRGRGRGGGGBBBRRBBBGRRRRRRGGBRRBGRBGRGGRRGGBBBGRBBRGBBBBRBRRGRBGRGGBGRGBBGRBBRRRGGRRRRBRBGBRRGBGGBBGGRRBBRBRBBRGRRRBGGRBRBBBRRGRRGGGGGBGGBGRRBBGBGGRRRRBBGGGGRGGRBGGRRGGRGRRBRBBRGBGRGGGRBGGBBBBBBBRRGRGBBBRBRRRGGGGBGRBGRGRRBBRRBGRRRRGBRRGGRBGRBGBBBGGGRGBGGRRBBBBRGGRGGRGRBBGGRGRBBRRBGGGGGBGGRRGGGGGRGBRRGBRGGGGBGBGGBBRBBBRGBBBGGBRBRGBBBGBRGBRBBGGRGRBBBGGBRGGRRGRGRGRRRRGRGRGBRBRGBBBGBGGBBGRGGBRRBGGGRRBGRBBBBRGRGGBBRGGBBGRRBBGRGGBBRBBBRGRBRGBRBBGBRBGRRRGBBRRRRBRBBBGRGGGBGGRBGBRR"));
            //System.out.println(Kata2.triangle("BGGBRGRBRRGBGBGGBRBGGGGBRRRRRBGBGGRBRGRBBRGGGGBBGRBRGRBRRGGRBGGBGGRGGGGGRRBRGBBGBBBGRBRRBGBRGGBGRRRRBRGRBRRGBGBRRGGBGBBGBBGGRBRGBGBGRBBBRBRGBBGRBRGBRBBRBGRRRRGGBGBRBRGRGBBRRGRRRRBRRGBBGGGRRRBRBGGBBBBBGRBRBRGRBBBBGRGGGBRRBRRGBGGBRBRGGGGBGGBBRBBGRGGGBGGRGBGGBBGBRGRRGBGRBRBGRGBRGBRBBGBBGGRGRBBBRBGBRRBGGBGGGRGRBGGRBRRBRRGBRBGBRBGBBBBGGGGRBRGBGBGRBBBGRGGRGBRBBBGRBRGGBGBBBGBGRRGBGBRRGGRRBRGGRBBGRGBGBBGGBRBBBRBBBBRRBRBGBGGGRGRRGGGRRRRRRGGGGBRRRRRGBGRBBRRBGBBGGRGRRRGRBGBBBRBBRBRRGGGGGRRBBGRBGRRGGRBRBRBRBBGGRBBRBBBBBBBGBRBGBGRRBRBGRGRRGRRRRBRGBRBGRGRRBGBBRBGGGBRGRBBGBGRGRGBBRRGRGRBGRBBRGRGBBGRRRGGRRGRGRGRBGRGRRGBBGBGRRRBBGGBGGRGGGRBRRBBBGGGRRGRBBBRGGBGGGRRBGBBGRRBRRGBRGRGBRGBRBRGBBGBBGBGBRBRBGBRRGRRBRRBGBRGGRGRGRGGRBGBRRBGBRGBGGBBGRRRRRRRGBGGRGGGGRBGRGGBRRGRRBRBBRGRBBBRGRRBGRBGBGGGGGGRGBGGBGGGBGRRRGRGRRBRBRGGGBRBGBBGRRRGGBRRGRBBGGRGRBRRRBRRRGRGRRBGBGGBBGGGBBBBBRGBRBGBRRGBGRBGRGBBBBRRGRRGRRRBRRGBRGBGBRRGRGRRGRBBBRBGRRRBBBRGGGBBGRGBGGBRRGGGGBRGRRRBBRRRGBBGGBGBBRGBBBRRBGBRRRRRBBRBRGRBRGBGRRRBGGGRR"));
        }
        long stopTime = System.currentTimeMillis();
        long elapsedTimeAVG = stopTime - startTime;
        System.out.println("average run-time per " + tests + " tests: " + elapsedTimeAVG);
        System.out.println("average run-time per test: " + elapsedTimeAVG / tests);
    }

    protected static String getSaltString() {
        String SALTCHARS = "RGB";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 1000000) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;
        
    }
    */

}